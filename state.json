{"jobs":{"0":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"1":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"2":{"id":"1","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {\n        var j = this;\n        setTimeout(() => {\n            cb(null, \"cool\");\n        }, 2000);\n    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":8,"runsLeft":"_$$ND_FUNC$$_function () {\n        return this.runCountStop - this.runCount;\n    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {\n        return true;\n    }"},"3":{"id":"2","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {\n        var j = this;\n        setTimeout(() => {\n            cb(null, \"cool\");\n        }, 2000);\n    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":8,"runsLeft":"_$$ND_FUNC$$_function () {\n        return this.runCountStop - this.runCount;\n    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {\n        return true;\n    }"},"4":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"5":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"6":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"7":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"8":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"9":"_$$ND_CC$$_$_$$.$$_jobs_$$.$$_2","10":"_$$ND_CC$$_$_$$.$$_jobs_$$.$$_3","11":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"12":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"},"13":{"id":"3","description":"Sending address changes","run":"_$$ND_FUNC$$_(cb) => {        var j = this;        setTimeout(() => {            cb(null, \"cool\");        }, 2000);    }","cronPattern":"* * * * * *","runCountStop":100,"runCount":0,"runsLeft":"_$$ND_FUNC$$_function () {        return this.runCountStop - this.runCount;    }","lastTime":1,"errorCountStop":3,"errorCount":0,"onError":"_$$ND_FUNC$$_() => {        return true;    }"}},"crons":{"1":{"context":{"job":"_$$ND_CC$$_$_$$.$$_jobs_$$.$$_2","queue":{"domain":null,"_events":{"success":"_$$ND_FUNC$$_function (result) {                \n        io.emit(\"success\",{ result : result,  job : job});        \n    }"},"_eventsCount":1,"fn":"/Users/Marty.Weel/Projects/queue/state.json","concurrency":4,"timeout":0,"pending":4,"session":1,"running":true,"jobs":"_$$ND_CC$$_$_$$.$$_jobs","crons":"_$$ND_CC$$_$_$$.$$_crons"}},"_callbacks":{"0":"_$$ND_FUNC$$_function () {\n        this.queue.jobs.push(this.job);\n        this.queue.start();\n      }"},"cronTime":{"source":"* * * * * *","zone":"America/Los_Angeles","second":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true,"24":true,"25":true,"26":true,"27":true,"28":true,"29":true,"30":true,"31":true,"32":true,"33":true,"34":true,"35":true,"36":true,"37":true,"38":true,"39":true,"40":true,"41":true,"42":true,"43":true,"44":true,"45":true,"46":true,"47":true,"48":true,"49":true,"50":true,"51":true,"52":true,"53":true,"54":true,"55":true,"56":true,"57":true,"58":true,"59":true},"minute":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true,"24":true,"25":true,"26":true,"27":true,"28":true,"29":true,"30":true,"31":true,"32":true,"33":true,"34":true,"35":true,"36":true,"37":true,"38":true,"39":true,"40":true,"41":true,"42":true,"43":true,"44":true,"45":true,"46":true,"47":true,"48":true,"49":true,"50":true,"51":true,"52":true,"53":true,"54":true,"55":true,"56":true,"57":true,"58":true,"59":true},"hour":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true},"dayOfMonth":{"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true,"24":true,"25":true,"26":true,"27":true,"28":true,"29":true,"30":true,"31":true},"month":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true},"dayOfWeek":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true}},"running":true,"_timeout":{"_called":false,"_idleTimeout":1000,"_idlePrev":{"0":"_$$ND_FUNC$$_function listOnTimeout() {\n  var msecs = this.msecs;\n  var list = this;\n\n  debug('timeout callback %d', msecs);\n\n  var now = Timer.now();\n  debug('now: %s', now);\n\n  var diff, first, threw;\n  while (first = L.peek(list)) {\n    diff = now - first._idleStart;\n    if (diff < msecs) {\n      list.start(msecs - diff, 0);\n      debug('%d list wait because diff is %d', msecs, diff);\n      return;\n    } else {\n      L.remove(first);\n      assert(first !== L.peek(list));\n\n      if (!first._onTimeout) continue;\n\n      // v0.4 compatibility: if the timer callback throws and the\n      // domain or uncaughtException handler ignore the exception,\n      // other timers that expire on this tick should still run.\n      //\n      // https://github.com/joyent/node/issues/2631\n      var domain = first.domain;\n      if (domain && domain._disposed)\n        continue;\n\n      try {\n        if (domain)\n          domain.enter();\n        threw = true;\n        first._called = true;\n        first._onTimeout();\n        if (domain)\n          domain.exit();\n        threw = false;\n      } finally {\n        if (threw) {\n          // We need to continue processing after domain error handling\n          // is complete, but not by using whatever domain was left over\n          // when the timeout threw its exception.\n          var oldDomain = process.domain;\n          process.domain = null;\n          process.nextTick(listOnTimeoutNT, list);\n          process.domain = oldDomain;\n        }\n      }\n    }\n  }\n\n  debug('%d list empty', msecs);\n  assert(L.isEmpty(list));\n  list.close();\n  delete lists[msecs];\n}","_idleNext":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_1_$$.$$__timeout","_idlePrev":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_1_$$.$$__timeout","msecs":1000},"_idleNext":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_1_$$.$$__timeout_$$.$$__idlePrev","_idleStart":10351,"_onTimeout":"_$$ND_FUNC$$_function callbackWrapper() {\n\n\t\t// If there is sleep time remaining, calculate how long and go to sleep\n\t\t// again. This processing might make us miss the deadline by a few ms\n\t\t// times the number of sleep sessions. Given a MAXDELAY of almost a\n\t\t// month, this should be no issue.\n\n\t\tif (remaining) {\n\t\t\tif (remaining > MAXDELAY) {\n\t\t\t\tremaining -= MAXDELAY;\n\t\t\t\ttimeout = MAXDELAY;\n\t\t\t} else {\n\t\t\t\ttimeout = remaining;\n\t\t\t\tremaining = 0;\n\t\t\t}\n\n\t\t\tself._timeout = setTimeout(callbackWrapper, timeout);\n\t\t} else {\n\n\t\t\t// We have arrived at the correct point in time.\n\n\t\t\tself.running = false;\n\n\t\t\t//start before calling back so the callbacks have the ability to stop the cron job\n\t\t\tif (!(self.runOnce)) self.start();\n\n\t\t\tself.fireOnTick();\n\t\t\t//for (var i = (self._callbacks.length - 1); i >= 0; i--)\n\t\t\t\t//self._callbacks[i].call(self.context, self.onComplete);\n\t\t}\n\t}","_repeat":null}},"2":{"context":{"job":"_$$ND_CC$$_$_$$.$$_jobs_$$.$$_3","queue":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_1_$$.$$_context_$$.$$_queue"},"_callbacks":{"0":"_$$ND_FUNC$$_function () {\n        this.queue.jobs.push(this.job);\n        this.queue.start();\n      }"},"cronTime":{"source":"* * * * * *","zone":"America/Los_Angeles","second":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true,"24":true,"25":true,"26":true,"27":true,"28":true,"29":true,"30":true,"31":true,"32":true,"33":true,"34":true,"35":true,"36":true,"37":true,"38":true,"39":true,"40":true,"41":true,"42":true,"43":true,"44":true,"45":true,"46":true,"47":true,"48":true,"49":true,"50":true,"51":true,"52":true,"53":true,"54":true,"55":true,"56":true,"57":true,"58":true,"59":true},"minute":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true,"24":true,"25":true,"26":true,"27":true,"28":true,"29":true,"30":true,"31":true,"32":true,"33":true,"34":true,"35":true,"36":true,"37":true,"38":true,"39":true,"40":true,"41":true,"42":true,"43":true,"44":true,"45":true,"46":true,"47":true,"48":true,"49":true,"50":true,"51":true,"52":true,"53":true,"54":true,"55":true,"56":true,"57":true,"58":true,"59":true},"hour":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true},"dayOfMonth":{"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true,"12":true,"13":true,"14":true,"15":true,"16":true,"17":true,"18":true,"19":true,"20":true,"21":true,"22":true,"23":true,"24":true,"25":true,"26":true,"27":true,"28":true,"29":true,"30":true,"31":true},"month":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true,"7":true,"8":true,"9":true,"10":true,"11":true},"dayOfWeek":{"0":true,"1":true,"2":true,"3":true,"4":true,"5":true,"6":true}},"running":true,"_timeout":{"_called":false,"_idleTimeout":999,"_idlePrev":{"0":"_$$ND_FUNC$$_function listOnTimeout() {\n  var msecs = this.msecs;\n  var list = this;\n\n  debug('timeout callback %d', msecs);\n\n  var now = Timer.now();\n  debug('now: %s', now);\n\n  var diff, first, threw;\n  while (first = L.peek(list)) {\n    diff = now - first._idleStart;\n    if (diff < msecs) {\n      list.start(msecs - diff, 0);\n      debug('%d list wait because diff is %d', msecs, diff);\n      return;\n    } else {\n      L.remove(first);\n      assert(first !== L.peek(list));\n\n      if (!first._onTimeout) continue;\n\n      // v0.4 compatibility: if the timer callback throws and the\n      // domain or uncaughtException handler ignore the exception,\n      // other timers that expire on this tick should still run.\n      //\n      // https://github.com/joyent/node/issues/2631\n      var domain = first.domain;\n      if (domain && domain._disposed)\n        continue;\n\n      try {\n        if (domain)\n          domain.enter();\n        threw = true;\n        first._called = true;\n        first._onTimeout();\n        if (domain)\n          domain.exit();\n        threw = false;\n      } finally {\n        if (threw) {\n          // We need to continue processing after domain error handling\n          // is complete, but not by using whatever domain was left over\n          // when the timeout threw its exception.\n          var oldDomain = process.domain;\n          process.domain = null;\n          process.nextTick(listOnTimeoutNT, list);\n          process.domain = oldDomain;\n        }\n      }\n    }\n  }\n\n  debug('%d list empty', msecs);\n  assert(L.isEmpty(list));\n  list.close();\n  delete lists[msecs];\n}","_idleNext":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_2_$$.$$__timeout","_idlePrev":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_2_$$.$$__timeout","msecs":999},"_idleNext":"_$$ND_CC$$_$_$$.$$_crons_$$.$$_2_$$.$$__timeout_$$.$$__idlePrev","_idleStart":10352,"_onTimeout":"_$$ND_FUNC$$_function callbackWrapper() {\n\n\t\t// If there is sleep time remaining, calculate how long and go to sleep\n\t\t// again. This processing might make us miss the deadline by a few ms\n\t\t// times the number of sleep sessions. Given a MAXDELAY of almost a\n\t\t// month, this should be no issue.\n\n\t\tif (remaining) {\n\t\t\tif (remaining > MAXDELAY) {\n\t\t\t\tremaining -= MAXDELAY;\n\t\t\t\ttimeout = MAXDELAY;\n\t\t\t} else {\n\t\t\t\ttimeout = remaining;\n\t\t\t\tremaining = 0;\n\t\t\t}\n\n\t\t\tself._timeout = setTimeout(callbackWrapper, timeout);\n\t\t} else {\n\n\t\t\t// We have arrived at the correct point in time.\n\n\t\t\tself.running = false;\n\n\t\t\t//start before calling back so the callbacks have the ability to stop the cron job\n\t\t\tif (!(self.runOnce)) self.start();\n\n\t\t\tself.fireOnTick();\n\t\t\t//for (var i = (self._callbacks.length - 1); i >= 0; i--)\n\t\t\t\t//self._callbacks[i].call(self.context, self.onComplete);\n\t\t}\n\t}","_repeat":null}}}}